# -*- coding = utf-8 -*-
# by XS-Jinbert
# only can download from https://asmhentai.com/

from bs4 import BeautifulSoup
import requests
import threading
import time
import os
import re

# 正则表达式寻找规则
findPage = re.compile(r'<h3>Pages: (.*?)</h3>')
findArtists = re.compile(r'<div class="tag_list"><a href="/artists/name/(.*?)/"><span class="badge tag">')
findTitle = re.compile(r'<h2>(.*?)</h2>')
findSaveID = re.compile(r'images.asmhentai.com/(.*?)/')

def main():
    while (True):
        print("\033[1;31m单线程无界面本子下载器V1.3     By XS-Jinbert From git    文件根目录：D:\\HentaiDownloader\033[0m")
        node = input(
            "\033[1;34m请选择你要使用的模式：\033[0m\n\033[1;33m1、指定本子编号下载（请输入1）\n2、指定本子编号范围下载（请输入2）\n3、录入多个本子编号下载（请输入3）\n4、退出（请输入其他）\033[0m\n\033[1;34m请输入：\033[0m")
        if (node == "1"):
            DownloadModeONE()
        elif (node == "2"):
            DownloadModeTWO()
        elif (node == "3"):
            DownloadModeTHREE()
        else:
            break
    print("欢迎使用，祝您身体健康，生活愉悦~")

# 下载方式1，三线程下载图片
def DownloadModeONE():
    again = True
    while again:
        bookID = input("\033[1;34m请输入要下载的本子编号：\033[0m")
        book = bookDownload(bookID, "单本下载")
        book.RunThread()
        again = Again()
        os.system('cls')

# 下载方式2，单线程下载本子，本子三线程下载图片
def DownloadModeTWO():
    again = True
    while (again):
        print("\033[1;31m【注意】本作业为单本子4线程下载!\033[0m")
        StartNumber = input("\033[1;34m请输入开始下载的本子编号：\033[0m")
        EndNumber = input("\033[1;34m请输入停止下载的本子编号：\033[0m")
        for i in range(int(StartNumber), int(EndNumber)):
            book = bookDownload(str(i), "单本下载")
            book.RunThread()
        again = Again()
        os.system('cls')

# 下载方式3，3线程下载本子，本子3线程下载图片
def DownloadModeTHREE():
    again = True
    while (again):
        print("\033[1;31m【注意】本作业为单本子4线程下载!\n且没有自查编号功能，请确保你输入的本子编号是正确的！\033[0m")
        Number = {}
        n = 1
        while (True):
            addNumber = input("\033[1;34m请开始输入要下载的第" + str(n) + "个本子编号（输入0结束录入）：\033[0m")
            if (addNumber == "0"):
                break
            else:
                Number[n] = addNumber
                n = n + 1
        start = time.time()  # 记录下载开始时间
        print("\033[1;34m共" + str(n - 1) + "本,开始下载: \033[0m")
        book = bookDownloadThread(Number)
        book.RunThread()
        end = time.time()  # 记录下载结束时间
        print("\033[1;34m下载已完成！共", n - 1, "本共用时：" + str(end - start) + "s\033[0m")
        again = Again()
        os.system('cls')

# 是否继续操作
def Again():
    node = input("是否继续操作？\n1、是（请输入1）\n2、否（请输入2）\n请输入：")
    if(node == "1"):
        return True
    else:
        return False

# 本子线程运行类
class bookDownloadThread:
    lock = threading.RLock()
    start = 0.0
    end = 0.0

    def __init__(self, Number):
        self.Number = Number
        self.number = 0
        self.downNumber = 1
        for key in Number:
            self.number = self.number + 1

    def Download(self, ThreadID):
        while True:
            DownloadBooknumber = 0
            bookDownloadThread.lock.acquire()
            try:
                DownloadBooknumber = self.downNumber  # 访问将下载页数
                if DownloadBooknumber > self.number:
                    break
                self.downNumber = self.downNumber + 1  # 将下载页数+1
            finally:
                bookDownloadThread.lock.release()
            print("\033[1;33m" + ThreadID + " 开始下载第", DownloadBooknumber, "本\033[0m")
            book = bookDownload(self.Number[DownloadBooknumber], ThreadID)
            book.RunThread()

    def RunThread(self):
        bookDownloadThread.start = time.time()  # 记录下载开始时间

        t1 = Book_thread("本子下载线程1", self)
        t2 = Book_thread("本子下载线程2", self)
        t3 = Book_thread("本子下载线程3", self)

        t1.start()
        t2.start()
        t3.start()

        t1.join()
        t2.join()
        t3.join()

        bookDownloadThread.end = time.time()  # 记录下载结束时间
        print("\033[1;34m本次下载完成！共用时", str(bookDownloadThread.end - bookDownloadThread.start),
              "s\033[0m")

# 图片线程运行类
class bookDownload:
    lock = threading.RLock()
    start = 0.0
    end = 0.0

    def __init__(self, bookID, ThreadID):
        self.info = {
            "bookID": bookID,
            "title": "",
            "artist": "",
            "page": {"Number": 0, "DownloadNumber": 1},
            "saveID": "001",
            "failPage": {},
            "bookURL": "https://asmhentai.com/g/",
            "pageURL": "https://images.asmhentai.com/",
            "root": "D://HentaiDownloader/",
            "threadID": ThreadID + "："
        }

    # 发送请求获取网站html
    def askURL(self):
        i = 0
        exception = ""
        while i < 5:    # 断线则重连4次
            url = self.info["bookURL"] + self.info["bookID"]
            html = ""
            try:
                r = requests.get(url, timeout=5)
                r.raise_for_status()
                html = r.text
                return html
            except Exception as e:
                print("\033[1;36m请求本子网址出错!\033[0m\n")
                i += 1
                exception = str(e)
                print("\033[1;36m进行", i, "次重连（最多4次）\033[0m")
        print("\033[1;31m进行重连失败，请检查网络连接，错误原因：\n", exception, "\033[0m")

    # 获取必要信息
    def Findinfo(self, html):
        soup = BeautifulSoup(html, "html.parser")
        # 收集info的title、page["Nunber"]、artist信息
        right = soup.find_all("div", class_="right")
        right = str(right)

        title = re.findall(findTitle, right)  # 正则表达式收集日文/中文标题，去掉特殊符号以建立文件夹
        title[0] = title[0].replace("/", "")
        title[0] = title[0].replace("\\", "")
        title[0] = title[0].replace("<", "")
        title[0] = title[0].replace(">", "")
        title[0] = title[0].replace(":", "")
        title[0] = title[0].replace("*", "")
        title[0] = title[0].replace("|", "")
        title[0] = title[0].replace("?", "")
        self.info["title"] = self.info["bookID"].zfill(6) + title[0]

        page = re.findall(findPage, right)  # 正则表达式收集本子页码
        self.info["page"]["Number"] = int(page[0])

        artist = re.findall(findArtists, right)  # 正则表达式收集本子作者
        print(artist)
        if(len(artist) > 0):
            self.info["artist"] = artist[0]
        else:
            self.info["artist"] = "ArtistUnknow"

        # 收集info的saveID
        ImageLink = soup.find_all("img", class_="lazy no_image")
        ImageLink = str(ImageLink)
        saveID = re.findall(findSaveID, ImageLink)
        self.info["saveID"] = saveID[0]

    # 获取图片内容
    def askImageURL(self, pagenumber):
        i = 0
        exception = ""
        while i < 5:    # 断线则重连4次
            url = self.info["pageURL"] + self.info["saveID"] + "/" + self.info["bookID"] + "/" + pagenumber + ".jpg"
            try:
                r = requests.get(url, timeout=5)
                r.raise_for_status()
                return r.content
            except Exception as e:
                print("\033[1;31m获取图片出错!\033[0m\n", str(e))
                exception = str(e)
                i += 1
                print("\033[1;36m进行", i, "次重连（最多4次）\033[0m")
        print("\033[1;31m进行重连失败，请检查网络连接，错误原因：\n", exception, "\033[0m")

    # 保存图片内容到当地
    def Download(self, content, n):
        root = self.info["root"] + self.info["artist"] + "/" + self.info["title"] + "//"
        path = root + n.zfill(4)+".jpg"
        try:
            if not os.path.exists("D://HentaiDownloader//"):                                    # 如果hentai下载根目录不存在则创建
                os.mkdir("D://HentaiDownloader//")
            if not os.path.exists("D://HentaiDownloader/"+self.info["artist"]+"//"):    # 如果本子作者根目录不存在则创建
                os.mkdir("D://HentaiDownloader/"+self.info["artist"]+"//")
            if not os.path.exists(root):                                                        # 如果本子根目录不存在则创建
                os.mkdir(root)

            if not os.path.exists(path):
                with open(path, "wb") as f:
                    f.write(content)
                    print("\033[1;36m本子" + self.info["bookID"] + "第" + n + "页下载成功！\033[0m")
            else:
                print("\033[1;36m文件已存在\033[0m")
            pass
        except Exception as e:
            print("\033[1;31m下载出错!\033[0m\n", str(e))

    # 下载图片线程调用函数
    def DownloadThread(self, ThreadName):
        while True:
            downloadPage = ""
            bookDownload.lock.acquire()
            try:
                DownloadPage = self.info["page"]["DownloadNumber"]  # 访问将下载页数
                if DownloadPage > self.info["page"]["Number"]:
                    break
                downloadPage = str(DownloadPage)
                self.info["page"]["DownloadNumber"] = self.info["page"]["DownloadNumber"] + 1  # 将下载页数+1
            finally:
                bookDownload.lock.release()
            print("\033[1;33m" + self.info["threadID"] + ThreadName + " 开始下载第" + downloadPage + "页\033[0m")
            content = bookDownload.askImageURL(self, downloadPage)
            bookDownload.Download(self, content=content, n=downloadPage)

    # 下载本子调用函数
    def RunThread(self):
        print("解析ing")
        html = bookDownload.askURL(self)
        bookDownload.Findinfo(self, html)
        print("解析成功")
        print("本子编号为：" + self.info["bookID"] + "\n标题为：" + self.info["title"] +
              "\n作者为：" + self.info["artist"] + "\n共" + str(self.info["page"]["Number"]) + "页")

        bookDownload.start = time.time()  # 记录下载开始时间

        t1 = Download_thread("本子" + self.info["bookID"] + "图片下载线程1", self)
        t2 = Download_thread("本子" + self.info["bookID"] + "图片下载线程2", self)
        t3 = Download_thread("本子" + self.info["bookID"] + "图片下载线程3", self)

        t1.start()
        t2.start()
        t3.start()

        t1.join()
        t2.join()
        t3.join()

        bookDownload.end = time.time()  # 记录下载结束时间
        print("\033[1;34m本子" + self.info["bookID"] + "下载完成！共用时", str(bookDownload.end - bookDownload.start),
              "s\033[0m")

# 图片下载线程类
class Download_thread(threading.Thread):
    def __init__(self, thread_id, bookDownload):
        threading.Thread.__init__(self)     # 需要对父类的构造函数进行初始化
        self.thread_id = thread_id
        self.DownloadThread = bookDownload

    def run(self):
        print(self.thread_id, '启动')
        self.DownloadThread.DownloadThread(self.thread_id)
        print(self.thread_id, '结束')

# 本子下载线程类
class Book_thread(threading.Thread):
    def __init__(self, thread_id, bookDownloadThread):
        threading.Thread.__init__(self)
        self.thread_id = thread_id
        self.DownloadThread = bookDownloadThread

    def run(self):
        print(self.thread_id, '启动')
        self.DownloadThread.Download(self.thread_id)
        print(self.thread_id, '结束')

if (__name__ == "__main__"):
    main()
